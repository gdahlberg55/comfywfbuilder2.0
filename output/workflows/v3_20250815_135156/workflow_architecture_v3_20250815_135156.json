{
  "workflow_name": "Fashion Outfit Variation with Pose Control",
  "description": "Advanced fashion generation workflow with pose control via ControlNet OpenPose, style transfer via IP-Adapter, and outfit variations using fashion LoRAs. Supports multiple generation branches for diverse outputs.",
  "stages": [
    {
      "stage_name": "Input Preparation",
      "stage_id": "input_prep",
      "nodes_required": [
        "LoadImage (pose reference)",
        "LoadImage (style reference)",
        "CLIPTextEncode (outfit descriptions)",
        "PrimitiveNode (generation settings)"
      ],
      "connections": [
        "Pose image -> OpenPose preprocessor",
        "Style reference -> IP-Adapter encoder",
        "Text prompts -> CLIP encoders"
      ]
    },
    {
      "stage_name": "Model Loading",
      "stage_id": "model_loading",
      "nodes_required": [
        "CheckpointLoaderSimple (base SD model)",
        "LoraLoader (fashion LoRA 1)",
        "LoraLoader (fashion LoRA 2)",
        "LoraLoader (fashion LoRA 3)",
        "ControlNetLoader (OpenPose)",
        "IPAdapterModelLoader"
      ],
      "connections": [
        "Checkpoint -> LoRA chain",
        "LoRAs chain through each other",
        "Models feed to respective apply nodes"
      ]
    },
    {
      "stage_name": "Pose Processing",
      "stage_id": "pose_control",
      "nodes_required": [
        "OpenPosePreprocessor",
        "ControlNetApplyAdvanced",
        "PreviewImage (pose preview)"
      ],
      "connections": [
        "Input image -> OpenPose preprocessor",
        "OpenPose output -> ControlNet Apply",
        "OpenPose output -> Preview for verification"
      ]
    },
    {
      "stage_name": "Style Transfer Setup",
      "stage_id": "style_transfer",
      "nodes_required": [
        "CLIPVisionLoader",
        "IPAdapterEncoder",
        "IPAdapterApply"
      ],
      "connections": [
        "Style reference -> CLIP Vision encode",
        "Encoded style -> IP-Adapter apply",
        "IP-Adapter integrated with conditioning"
      ]
    },
    {
      "stage_name": "Prompt Engineering",
      "stage_id": "prompt_setup",
      "nodes_required": [
        "CLIPTextEncode (base positive)",
        "CLIPTextEncode (negative)",
        "CLIPTextEncode (outfit variant 1)",
        "CLIPTextEncode (outfit variant 2)",
        "CLIPTextEncode (outfit variant 3)",
        "ConditioningConcat (combine prompts)"
      ],
      "connections": [
        "Text prompts -> CLIP encoding",
        "Base + outfit prompts concatenated",
        "Conditioning flows to generation branches"
      ]
    },
    {
      "stage_name": "Generation Branch 1 - Casual Outfit",
      "stage_id": "gen_branch_1",
      "nodes_required": [
        "KSampler (branch 1)",
        "VAEDecode",
        "ImageScaleBy (upscale)",
        "SaveImage"
      ],
      "connections": [
        "Model + ControlNet + IP-Adapter + Prompt 1 -> KSampler",
        "Latent -> VAE Decode",
        "Image -> Upscale -> Save"
      ]
    },
    {
      "stage_name": "Generation Branch 2 - Formal Outfit",
      "stage_id": "gen_branch_2",
      "nodes_required": [
        "KSampler (branch 2)",
        "VAEDecode",
        "ImageScaleBy (upscale)",
        "SaveImage"
      ],
      "connections": [
        "Model + ControlNet + IP-Adapter + Prompt 2 -> KSampler",
        "Latent -> VAE Decode",
        "Image -> Upscale -> Save"
      ]
    },
    {
      "stage_name": "Generation Branch 3 - Streetwear",
      "stage_id": "gen_branch_3",
      "nodes_required": [
        "KSampler (branch 3)",
        "VAEDecode",
        "ImageScaleBy (upscale)",
        "SaveImage"
      ],
      "connections": [
        "Model + ControlNet + IP-Adapter + Prompt 3 -> KSampler",
        "Latent -> VAE Decode",
        "Image -> Upscale -> Save"
      ]
    },
    {
      "stage_name": "Comparison and Output",
      "stage_id": "output_stage",
      "nodes_required": [
        "ImageCompositeMasked (grid layout)",
        "SaveImage (comparison grid)",
        "PreviewImage (individual previews)"
      ],
      "connections": [
        "All branch outputs -> Grid compositor",
        "Grid -> Final save",
        "Individual outputs -> Preview nodes"
      ]
    }
  ],
  "parameters": {
    "user_adjustable": [
      "pose_reference_image",
      "style_reference_image",
      "outfit_descriptions",
      "fashion_lora_weights",
      "controlnet_strength",
      "ip_adapter_weight",
      "sampling_steps",
      "cfg_scale",
      "seed",
      "generation_resolution",
      "upscale_factor"
    ],
    "fixed": [
      "vae_type",
      "scheduler",
      "sampler_name",
      "denoise_strength"
    ]
  },
  "data_flow": {
    "primary_buses": [
      "MODEL_BUS: Checkpoint -> LoRAs -> Samplers",
      "CLIP_BUS: CLIP model -> Text encoders",
      "CONDITIONING_BUS: Prompts + ControlNet + IP-Adapter -> Samplers",
      "IMAGE_BUS: Generated images -> Post-processing"
    ],
    "control_flow": [
      "Pose control applied to all branches",
      "Style reference applied to all branches",
      "Unique outfit prompts per branch",
      "Parallel generation for efficiency"
    ]
  },
  "optimization_notes": [
    "Use reroute nodes for MODEL and CLIP distribution",
    "Implement data buses for clean routing",
    "Group nodes by function with color coding",
    "Place control parameters in dedicated UI group",
    "Use consistent spacing for parallel branches"
  ]
}